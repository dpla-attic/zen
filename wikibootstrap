#!/usr/bin/env python


"""
wikibootstrap

"""

import re
import sys
import os
import glob
import time
from itertools import islice

from amara.thirdparty import httplib2
from amara.writers.struct import structwriter, structencoder, E, NS, ROOT, RAW, E_CURSOR
from amara.lib.iri import relativize, absolutize
from akara.util import header_credentials
from akara.util.moin import ORIG_BASE_HEADER, wiki_uri

from zen.util import sign_rulesheet

WIKITEXT_FNAME = "__pagetext__.txt"

def run(targetbase=None, root=None, out=None, usersecret=None, zensecret=None):
    '''
    See the command line help
    '''
    #print >> sys.stderr, 'ARGS ', (search, filesource, limit, out)
    H = httplib2.Http('.cache')
    auth_headers = {}
    if usersecret:
        user, passwd = usersecret.read().split(':')
        user, passwd = user.strip(), passwd.strip()
        auth_headers = header_credentials(user, passwd)
    if zensecret:
        zensecret = zensecret.read().strip()

    #files = glob.glob(os.path.join(filesource, '*.xml'))
    #Prepare the envelope for the output
    targetbase = targetbase.rstrip('/')

    #Try out the target, and figure out where it is relative to wiki root
    try:
        resp, respbody = H.request(targetbase)
        if resp.get('status').startswith('20'):
            original_base, wrapped_base, original_page = resp[ORIG_BASE_HEADER].split()
            rel_baselink = relativize(targetbase, wrapped_base)
        else:
            print >> sys.stderr, 'An exception here might mean you do not have Akara running at localhost:8880:', e
            sys.exit(0)
    except (KeyboardInterrupt, SystemExit):
        raise
    except Exception as e:
        print >> sys.stderr, 'An exception here might mean you do not have Akara running at %s:'%targetbase, e

    w = structwriter(stream=out, indent=True)
    output = w.cofeed(ROOT(E_CURSOR(u'wikipost', {u'rel-to-wikibase': rel_baselink})))

    #headers = {'Content-Type': 'application/xml'}; headers.update(auth_headers)
    headers = auth_headers
    for xroot, dirs, files in os.walk(root):
        #Need the topmost dir from the path as the root of the created Wiki subsection
        wikipath = '/'.join((os.path.split(root.rstrip('/'))[-1], xroot[len(root):]))
        #print >> sys.stderr, wikipath, root, (os.path.split(root.rstrip('/')+'/')[-1], xroot[len(root):])
        if WIKITEXT_FNAME in files:
            content = open(os.path.join(xroot, WIKITEXT_FNAME)).read()
            #Substitute wiki base URI where specified
            #Note: yes this is of course a substitution of which users must be aware
            content = content.replace('[[$BOOTSTRAPBASE', '[[%s'%rel_baselink)
            moinid = '/'.join((targetbase.rstrip('/'), wikipath))
            try:
                resp, respbody = H.request(moinid, "PUT", body=content, headers=headers)
                if resp.get('status').startswith('20'):
                    output.send(
                        E(u'update-page', {u'moinid': moinid})
                    )
                else:
                    output.send(
                        E(u'page-failure', {u'moinid': moinid, u'status': resp.get('status'), u'reason':respbody})
                    )
                    #print >> sys.stderr, 'Failed to update page %s (%s).  See Akara logs.'%(moinid, resp.get('status'))
            except (KeyboardInterrupt, SystemExit):
                raise
            except Exception as e:
                #FIXME: Provide an option to override localhost:8880
                print >> sys.stderr, 'An exception here might mean you do not have Akara running at localhost:8880:', e
            files.remove(WIKITEXT_FNAME)
        for fname in files:
            content = open(os.path.join(xroot, fname)).read()
            if zensecret and fname.rsplit('.')[-1] == 'rsheet':
                content = sign_rulesheet(zensecret, content)
            moinid = '%s/%s;attachment=%s'%(targetbase.rstrip('/'), wikipath, fname)
            try:
                resp, respbody = H.request(moinid, "POST", body=content, headers=headers)
                if resp.get('status').startswith('2'):
                    output.send(
                        E(u'update-page', {u'moinid': moinid})
                    )
                else:
                    output.send(
                        E(u'page-failure', {u'moinid': moinid, u'status': resp.get('status'), u'reason':respbody})
                    )
                    #print >> sys.stderr, 'Failed to update page %s (%s).  See Akara logs.'%(moinid, resp.get('status'))
            except (KeyboardInterrupt, SystemExit):
                raise
            except Exception as e:
                #FIXME: Provide an option to override localhost:8880 in message
                print >> sys.stderr, 'An exception here might mean you do not have Akara running at %s:'%moinid, e

    output.close()
    return


# Handle the command-line arguments

from akara.thirdparty import argparse #Sorry PEP 8 ;)

#import signal
#import shutil

if __name__ == '__main__':
    #parser = argparse.ArgumentParser(prog="bootstrap", add_help=False)
    parser = argparse.ArgumentParser()
    #parser.add_argument('-o', '--output')
    parser.add_argument('root', metavar='root', nargs=1,
                        help='The root dir for the pages and attachments')
    parser.add_argument('--out', type=argparse.FileType('w'), default=sys.stdout,
        help='file where output should be written '
             '(default: write to stdout)')
    parser.add_argument('-u', '--usersecret', type=argparse.FileType('r'),
        help='file from which wiki login can be read, in the format username:passwd')
    parser.add_argument('--zensecret', type=argparse.FileType('r'),
        help='file from which Zen rulesheet signing secret can be read')
    
    parser.add_argument("--target", metavar="TARGET_MOINREST_URL", dest="target",
                        #default="http://localhost:8880/moin/mywiki",
                        help="Akara moin/REST endpoint for the wiki to update")
    #
    args = parser.parse_args()

    run(targetbase=args.target, root=args.root[0], out=args.out, usersecret=args.usersecret, zensecret=args.zensecret)
    args.out.close()

