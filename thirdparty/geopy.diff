Index: geopy/geocoders/google.py
===================================================================
--- geopy/geocoders/google.py	(revision 120)
+++ geopy/geocoders/google.py	(working copy)
@@ -3,7 +3,15 @@
 try:
     import json as simplejson
 except ImportError:
-    import simplejson
+    try:
+        import simplejson
+    except ImportError:
+        try:
+            from django.utils import simplejson
+        except ImportError:
+            import sys
+            print >> sys.stderr, "simplejson was not found. " \
+                  "Geocoders relying on JSON parsing will not work."
 
 import xml
 from xml.parsers.expat import ExpatError
@@ -206,3 +214,6 @@
 
 class GTooManyQueriesError(GeocoderResultError):
     pass
+
+from geopy.geocoders import register
+register("google", Google)
Index: geopy/geocoders/geonames.py
===================================================================
--- geopy/geocoders/geonames.py	(revision 120)
+++ geopy/geocoders/geonames.py	(working copy)
@@ -1,3 +1,124 @@
+'''
+Use GeoNames.org Web services for geolocation http://www.geonames.org/export/ws-overview.html
+
+Uses the "search" endpoint: http://www.geonames.org/export/geonames-search.html
+'''
+
+import logging
+
+from urllib import urlencode
+from urllib2 import urlopen
+
+import xml
+from xml.parsers.expat import ExpatError
+
+from geopy.geocoders.base import Geocoder
+from geopy import Point, Location, util
+
+try:
+    from akara import logger
+except ImportError:
+    logger = None
+
+try:
+    import json as simplejson
+except ImportError:
+    try:
+        import simplejson
+    except ImportError:
+        try:
+            from django.utils import simplejson
+        except ImportError:
+            import sys
+            print >> sys.stderr, "simplejson was not found. " \
+                  "Geocoders relying on JSON parsing will not work."
+
+
+class GeoNames(Geocoder):
+    def __init__(self, format_string='%s', output_format='xml', user=None):
+        self.format_string = format_string
+        self.output_format = output_format
+        self.user = user or ''
+
+    @property
+    def url(self):
+        domain = "ws.geonames.org"
+        if self.user:
+            domain = "ba-ws.geonames.net"
+            user = 'username=%s&'%self.user
+            logger.debug('Using Commercial GeoNames service (ba-ws.geonames.org). Username: ' + self.user)
+        output_format = self.output_format.lower()
+        append_formats = {'json': 'JSON'}
+        resource = "search" + append_formats.get(output_format, '')
+        return "http://%(domain)s/%(resource)s?%(user)s%%s" % locals()
+
+    def geocode(self, string, exactly_one=True):
+        params = {'q': string}
+        url = self.url % urlencode(params)
+        #import sys; print >> sys.stderr, (url,)
+        return self.geocode_url(url, exactly_one)
+
+    def geocode_url(self, url, exactly_one=True):
+        page = urlopen(url)
+        dispatch = getattr(self, 'parse_' + self.output_format)
+        return dispatch(page, exactly_one)
+
+    def parse_json(self, page, exactly_one):
+        if not isinstance(page, basestring):
+            page = util.decode_page(page)
+        json = simplejson.loads(page)
+        codes = json.get('postalCodes', [])
+        
+        if exactly_one and len(codes) != 1:
+            raise ValueError("Didn't find exactly one code! " \
+                             "(Found %d.)" % len(codes))
+        
+        def parse_code(code):
+            place = util.join_filter(", ", [code.get('placeName'),
+                                             code.get('countryCode')])
+            location = util.join_filter(" ", [place,
+                                               code.get('postalCode')]) or None
+            latitude = code.get('lat')
+            longitude = code.get('lng')
+            latitude = latitude and float(latitude)
+            longitude = longitude and float(longitude)
+            return (location, (latitude, longitude))
+
+        if exactly_one:
+            return parse_code(codes[0])
+        else:
+            return (parse_code(code) for code in codes)
+
+    def parse_xml(self, page, exactly_one):
+        if not isinstance(page, basestring):
+            page = util.decode_page(page)
+        doc = xml.dom.minidom.parseString(page)
+        codes = doc.getElementsByTagName('geoname')
+        
+        if exactly_one and len(codes) != 1:
+            raise ValueError("Didn't find exactly one geoname! " \
+                             "(Found %d.)" % len(codes))
+
+        def parse_code(code):
+            place_name = util.get_first_text(code, 'name')
+            country_code = util.get_first_text(code, 'countryCode')
+            postal_code = util.get_first_text(code, 'postalcode')
+            place = util.join_filter(", ", [place_name, country_code])
+            location = util.join_filter(" ", [place, postal_code]) or None
+            latitude = util.get_first_text(code, 'lat') or None
+            longitude = util.get_first_text(code, 'lng') or None
+            latitude = latitude and float(latitude)
+            longitude = longitude and float(longitude)
+            return (location, (latitude, longitude))
+        
+        if exactly_one:
+            return parse_code(codes[0])
+        else:
+            return (parse_code(code) for code in codes)
+
+from geopy.geocoders import register
+register("geonames", GeoNames)
+
 import xml.dom.minidom
 from urllib import urlencode
 from urllib2 import urlopen
Index: geopy/geocoders/yahoo.py
===================================================================
--- geopy/geocoders/yahoo.py	(revision 120)
+++ geopy/geocoders/yahoo.py	(working copy)
@@ -62,3 +62,8 @@
             })
 
         return [parse_result(result) for result in results]
+
+
+from geopy.geocoders import register
+register("yahoo", Yahoo)
+
Index: geopy/geocoders/__init__.py
===================================================================
--- geopy/geocoders/__init__.py	(revision 120)
+++ geopy/geocoders/__init__.py	(working copy)
@@ -1,3 +1,35 @@
+#from geopy.geocoders_old import *
+
+GEOCODERS = {}
+
+def register(geocoder_name, cls):
+    GEOCODERS[geocoder_name] = cls
+    return
+
+
+def lookup(geocoder_name):
+    '''
+    Get a Geocoder class given its registered name
+    '''
+    return GEOCODERS[geocoder_name]
+
+
+def get_geocoder(geocoder_name, **kwargs):
+    '''
+    Get a Geocoder instance given its registered name, and initializer params
+    '''
+    return GEOCODERS[geocoder_name](**kwargs)
+
+
+#The default geocoders self-register upon import
+import geonames
+import google
+import yahoo
+import wiki_semantic
+
+#from google import Google
+# TODO, switch geocoders to the new ones in this directory after testing
+
 from geopy.geocoders.bing import Bing
 from geopy.geocoders.google import Google
 from geopy.geocoders.dot_us import GeocoderDotUS
@@ -5,3 +37,4 @@
 from geopy.geocoders.wiki_gis import MediaWiki
 from geopy.geocoders.wiki_semantic import SemanticMediaWiki
 from geopy.geocoders.yahoo import Yahoo
+
Index: geopy/geocoders/wiki_semantic.py
===================================================================
--- geopy/geocoders/wiki_semantic.py	(revision 120)
+++ geopy/geocoders/wiki_semantic.py	(working copy)
@@ -1,14 +1,14 @@
-import xml.dom.minidom
+#import xml.dom.minidom
 from geopy.geocoders.base import Geocoder
 from geopy.point import Point
 from geopy.location import Location
 from geopy import util
 
-try:
-    from BeautifulSoup import BeautifulSoup
-except ImportError:
-    util.logger.warn("BeautifulSoup was not found. " \
-          "The SemanticMediaWiki geocoder will not work.")
+#try:
+#    from BeautifulSoup import BeautifulSoup
+#except ImportError:
+#    util.logger.warn("BeautifulSoup was not found. " \
+#          "The SemanticMediaWiki geocoder will not work.")
 
 try:
     set
@@ -23,7 +23,7 @@
         self.relations = relations
         self.prefer_semantic = prefer_semantic
         self.transform_string = transform_string
-    
+
     def get_url(self, string):
         return self.format_url % self.transform_string(string)
 
@@ -106,3 +106,7 @@
                     break
 
         return (name, (latitude, longitude))
+
+
+from geopy.geocoders import register
+register("semantic_media_wiki", SemanticMediaWiki)
Index: setup.py
===================================================================
--- setup.py	(revision 120)
+++ setup.py	(working copy)
@@ -1,4 +1,4 @@
-from setuptools import setup, find_packages
+from distutils.core import setup
 
 install_requires = []
 
@@ -10,13 +10,13 @@
     install_requires.append('simplejson')
 
 setup(name='geopy',
-    version='0.94',
+    version='0.94dev.zen.2',
     description='Python Geocoding Toolbox',
     author='Brian Beck',
     author_email='exogen@gmail.com',
     url='http://www.geopy.org/',
     download_url='http://code.google.com/p/geopy/downloads/list',
-    packages=find_packages(),
+    packages=['geopy', 'geopy.geocoders', 'geopy.parsers'],
     install_requires=install_requires,
     test_suite = "geopy.tests.run_tests.all_tests",
     license='MIT',
@@ -31,3 +31,4 @@
         "Topic :: Software Development :: Libraries :: Python Modules"
     ],
 )
+
